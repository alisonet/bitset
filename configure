#!/bin/sh
# TODO: ADD LICENSE FROM CK

REQUIRE_HEADER="stdbool.h stddef.h stdint.h stdio.h string.h time.h"

EXIT_SUCCESS=0
EXIT_FAILURE=1

VERSION='2.1'
VERSION_MAJOR='2'
VERSION_MINOR='1'
BUILD="$PWD/build/bitset.build"
PREFIX=${PREFIX:-"/usr/local"}
OPTIMISATION=${OPTIMISATION:-"-O3"}

export CFLAGS
export PREFIX
LC_ALL=C
export LC_ALL

if test -n "${BASH_VERSION+set}" && (set -o posix) >/dev/null 2>&1; then
 	set -o posix
fi

trap epilog 1 2 3 6

epilog() {
	rm -f .1.c .1
}

assert() {

	if test "$#" -eq 2; then
		fail=$2
		print=true
	elif test "$#" -eq 3; then
		fail=$3
		print=echo
	else
		echo "Usage: assert <test> <fail string> or assert <test> <success string> <fail string>" 1>&2
		exit $EXIT_FAILURE
	fi

	if test -z "$1"; then
		echo "failed  [$fail]"
		exit $EXIT_FAILURE
	else
		${print} "success [$1]"
	fi
}

generate() {
	sed \
		-e "s#@VERSION@#$VERSION#g" \
		-e "s#@VERSION_MAJOR@#$VERSION_MAJOR#g" \
		-e "s#@CC@#$CC#g" \
		-e "s#@CFLAGS@#$CFLAGS#g" \
		-e "s#@HEADERS@#$HEADERS#g" \
		-e "s#@OPTIMISATION@#$OPTIMISATION#g" \
		-e "s#@LIBRARY@#$LIBRARY#g" \
		-e "s#@PREFIX@#$PREFIX#g" \
		-e "s#@LD@#$LD#g" \
		-e "s#@LDFLAGS@#$LDFLAGS#g" \
		$1 > $2
}

generate_stdout() {

	echo
	echo "                CC = $CC"
	echo "          COMPILER = $COMPILER"
	echo "            CFLAGS = $CFLAGS"
	echo "                LD = $LD"
	echo "           LDFLAGS = $LDFLAGS"
	echo "      OPTIMISATION = $OPTIMISATION"
	echo
	echo "Headers will be installed in $HEADERS"
	echo "Libraries will be installed in $LIBRARY"
}

for option in $*; do
	value=`echo "$option" | sed -e 's/^[^=]*=\(.*\)/\1/'`

	case "$option" in
	--help)
		echo "Usage: ./configure [OPTIONS]"
		echo
		echo
		echo "The following options may be used to modify installation behavior."
		echo "  --includedir=N    Headers directory (default is ${PREFIX}/include)"
		echo "  --libdir=N        Libraries directory (default is ${PREFIX}/lib)"
		echo "  --prefix=N        Installs library files in N (default is $PREFIX)"
		echo
		echo "The following environment variables may be used:"
		echo "          CC  C compiler command"
		echo "      CFLAGS  C compiler flags"
		echo "     LDFLAGS  Linker flags"
		echo "OPTIMISATION  Compiler optimisation level"
		echo
		exit $EXIT_SUCCESS
		;;
	--prefix=*)
		PREFIX=$value
		;;
	--includedir=*)
		HEADERS=$value
		;;
	--libdir=*)
		LIBRARY=$value
		;;
	*)
		echo "./configure [--help]"
		exit $EXIT_FAILURE
		;;
	esac
done

HEADERS=${HEADERS:-"${PREFIX}/include"}
LIBRARY=${LIBRARY:-"${PREFIX}/lib"}

printf "Detecting operating system......."
SYSTEM=`uname -s 2> /dev/null`
case "$SYSTEM" in
	"SunOS")
		SYSTEM=solaris
		;;
	"Linux"|"uClinux")
		SYSTEM=linux
		;;
	"FreeBSD"|"GNU/kFreeBSD")
		SYSTEM=freebsd
		;;
	"NetBSD")
		SYSTEM=netbsd
		;;
	"OpenBSD")
		SYSTEM=openbsd
		;;
	"DragonFly")
		SYSTEM=dragonflybsd
		;;
	"Darwin")
		SYSTEM=darwin
		;;
	*)
		SYSTEM=
		;;
esac

assert "$SYSTEM" "$SYSTEM" "unsupported"

# `which` on Solaris sucks
pathsearch()
{
	what=$1
	oldFS="$IFS"
	IFS=":"
	for d in $PATH ; do
		if test -x "$d/$what" ; then
			echo "$d/$what";
			IFS="$oldFS"
			return
		fi
	done
	IFS="$oldFS"
}

printf "Finding suitable compiler........"
CC=`pathsearch "${CC:-cc}"`
if test -z "$CC" -o ! -x "$CC"; then
	CC=`pathsearch "${CC:-gcc}"`
fi
assert "$CC" "not found"

# Make sure GCC 4.X, the only supported compiler, is being used.
cat << EOF > .1.c
#include <stdio.h>
int main(void) {
#if defined(__GNUC__) && (__GNUC__ >= 4)
	puts("gcc");
	return (0);
#else
	return (1);
#endif
}
EOF

$CC -o .1 .1.c
COMPILER=`./.1`
r=$?
rm -f .1.c .1

if test "$r" -ne 0; then
	assert "" "update compiler"
else
	echo "success [$CC]"
fi

if test "$COMPILER" = "gcc"; then
	LD=$CC
	if test "$SYSTEM" = "darwin"; then
		CC_WL_OPT="-install_name"
	else
		CC_WL_OPT="-soname"
	fi
	LDFLAGS="-shared -fPIC -Wl,$CC_WL_OPT,libbitset.so.$VERSION_MAJOR $LDFLAGS"
	CFLAGS="-Wall -std=c99 -pedantic $CFLAGS"
else
	assert "" "unknown compiler"
fi

for i in $REQUIRE_HEADER; do
	printf "Checking header file usability..."

	cat << EOF > .1.c
#include <$i>
int main(void){return(0);}
EOF
	$CC -o .1 .1.c 2> /dev/null
	hf_s=$?

	rm -f .1 .1.c
	if test $hf_s -eq 0; then
		echo "success [$i]"
	else
		echo "failed  [$i]"
		exit $EXIT_FAILURE
	fi
done

printf "Generating build files..........."

generate build/env.in build/env
generate build/bitset.pc.in build/bitset.pc
generate Makefile.in Makefile

echo "success"
generate_stdout
